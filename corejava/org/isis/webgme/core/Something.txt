Clients:
	clientobjects = inverse of client
	
Objects:
	clientobjects = inverse of object

	data
	loaded

	parent
	children = inverse of parent
	
	territory
	
	
ClientObjects:
	client
	object

	parent = getClientObject(object.import(parent),client)
	children = inverse of parent
	
	basetype = getClientObject(object.import(basetype)),client)
	subtypes = inverse of basetype

	patterns
	selfPattern = patterns.contains("self")
	childrenPattern = patterns.contains("children")
	ancestorPattern = patterns.contains("ancestor")
	
	ancestorRequest = ancestorPattern 
		OR children.import(ancestorRequest) 
		OR subtypes.import(ancestorRequest)

	territory = selfPattern OR ancestorRequest OR parent.import(childrenPattern)

-----------------------------


Clients := Set
Objects := Set

parent : Objects -> Objects

PatternTypes = {"self", "children", "ancestor"}
patterns : Clients x Obejcts -> P(PatternTypes)

ancestorRequest : Clients x Objects -> {true, false}
ancestorRequest(c,o) = "ancestor" in patterns(c,o)
	OR (exists oo)(parent(oo) = o AND ancestorRequest(c,oo))
	OR (exists oo)(basetype(oo) = 0 AND ancestorRequest(c,oo))

clientTerritory : Clients x Objects -> {true, false}
	clientTerritory(c,o) = "self" in patterns(c,o)
	OR "children" in patterns(c,o)
	OR (exists oo)(parent(o) = oo AND "children" in patterns(c,oo))
	OR ancestorRequest(c,o)


